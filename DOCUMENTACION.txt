================================================================================
                    DOCUMENTACIÓN COMPLETA DEL PROYECTO
                         E-COMMERCE CURSOS DE INGLÉS
                              EL PROFESOR HERNÁN
================================================================================

ÍNDICE:
1. DESCRIPCIÓN GENERAL DEL PROYECTO
2. ESTRUCTURA DE CARPETAS Y ARCHIVOS
3. BASE DE DATOS Y MODELOS
4. SISTEMA DE AUTENTICACIÓN
5. CONTROLADORES Y FUNCIONALIDADES
6. VISTAS Y FRONTEND
7. CONFIGURACIÓN Y ARCHIVOS DE APOYO
8. FLUJO DE TRABAJO DEL SISTEMA
9. FUNCIONALIDADES IMPLEMENTADAS
10. TECNOLOGÍAS UTILIZADAS
11. INSTRUCCIONES DE INSTALACIÓN Y CONFIGURACIÓN

================================================================================
1. DESCRIPCIÓN GENERAL DEL PROYECTO
================================================================================

NOMBRE: E-commerce de Cursos de Inglés "El Profesor Hernán"
TIPO: Plataforma web de venta de cursos de inglés por niveles
ARQUITECTURA: MVC (Modelo-Vista-Controlador) en PHP puro
PROPÓSITO: Vender listas de reproducción de videos educativos organizadas por niveles del Marco Común Europeo (A1, A2, B1, B2, C1)

CARACTERÍSTICAS PRINCIPALES:
- Venta de cursos de inglés estructurados por niveles
- Gestión de videos y listas de reproducción
- Sistema de carrito de compras con códigos promocionales
- Panel de administración para gestión de contenido
- Autenticación con Firebase
- Reproducción de videos con controles personalizados
- Diseño responsive con CSS personalizado

================================================================================
2. ESTRUCTURA DE CARPETAS Y ARCHIVOS
================================================================================

RAÍZ DEL PROYECTO:
/
├── index.php                          (Punto de entrada principal)
├── login.php                          (Página de login)
├── signup.php                         (Página de registro)
├── logout.php                         (Script de cierre de sesión)
├── auth_callback.php                  (Callback de autenticación Firebase)
├── get_firebase_uid.php               (Herramienta de desarrollo para obtener UID)
├── config/
│   ├── Database.php                   (Clase de conexión a BD - Nueva versión)
│   └── database.php                   (Clase de conexión a BD - Versión antigua)
├── models/
│   ├── Playlist.php                   (Modelo para listas de reproducción)
│   └── Video.php                      (Modelo para videos)
├── controllers/
│   ├── AdminController.php            (Controlador del panel admin)
│   ├── CartController.php             (Controlador del carrito)
│   ├── PlaylistController.php         (Controlador de playlists)
│   └── VideoController.php            (Controlador de videos)
├── views/
│   ├── client/
│   │   ├── home.php                   (Página principal del cliente)
│   │   ├── cart.php                   (Vista del carrito)
│   │   ├── checkout.php               (Proceso de compra)
│   │   └── course-detail.php          (Detalle de curso)
│   └── admin/
│       ├── courses.php                (Punto de entrada admin)
│       ├── dashboard.php              (Dashboard administrativo)
│       ├── index.php                  (Lista de cursos admin)
│       ├── edit_playlist.php          (Editar playlist)
│       ├── edit_video.php             (Editar video)
│       ├── view_playlist.php          (Ver playlist y videos)
│       └── view_video.php             (Reproductor de video)
├── public/
│   └── css/
│       ├── styles.css                 (Estilos principales)
│       ├── admin.css                  (Estilos del panel admin)
│       ├── auth.css                   (Estilos de autenticación - No usado)
│       ├── auth-styles.css            (Estilos de login/signup)
│       └── course-detail.css          (Estilos para detalle de curso)
├── auth/
│   ├── firebase-config.js             (Configuración de Firebase)
│   └── auth.js                        (Funcionalidades de autenticación)
├── img/
│   ├── logo-profe-hernan.png          (Logo principal)
│   └── hero-image.png                 (Imagen del banner)
├── uploads/                           (Carpeta de archivos subidos)
│   ├── images/                        (Imágenes de portada de playlists)
│   ├── videos/                        (Archivos de video MP4)
│   └── thumbnails/                    (Miniaturas de videos)
└── scripts/                           (Scripts SQL)
    ├── create_users_table.sql
    ├── create_admin_user.sql
    ├── add_level_to_playlists_table.sql
    └── add_thumbnail_image_to_videos_table.sql

================================================================================
3. BASE DE DATOS Y MODELOS
================================================================================

BASE DE DATOS: MySQL
NOMBRE: ecommerce_cursos
HOST: 127.0.0.1 (localhost)
USUARIO: root
CONTRASEÑA: (vacía)

TABLAS PRINCIPALES:

1. TABLA: playlists
   - id (INT, AUTO_INCREMENT, PRIMARY KEY)
   - name (VARCHAR(255), NOT NULL)
   - description (TEXT)
   - level (ENUM: 'A1', 'A2', 'B1', 'B2', 'C1', 'mixto', DEFAULT 'A1')
   - cover_image (VARCHAR(255))
   - price (DECIMAL(10,2), DEFAULT 0.00)
   - created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP)

2. TABLA: videos
   - id (INT, AUTO_INCREMENT, PRIMARY KEY)
   - title (VARCHAR(255), NOT NULL)
   - description (TEXT)
   - file_path (VARCHAR(255), NOT NULL)
   - thumbnail_image (VARCHAR(255))
   - playlist_id (INT, FOREIGN KEY)
   - created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP)

3. TABLA: users
   - id (INT, AUTO_INCREMENT, PRIMARY KEY)
   - firebase_uid (VARCHAR(255), UNIQUE, NOT NULL)
   - email (VARCHAR(255), UNIQUE, NOT NULL)
   - role (ENUM: 'client', 'admin', DEFAULT 'client')
   - created_at (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP)

MODELOS IMPLEMENTADOS:

Playlist.php:
- create($data): Crear nueva playlist
- readAll(): Obtener todas las playlists
- readOne($id): Obtener playlist por ID
- update($id, $data): Actualizar playlist
- delete($id): Eliminar playlist

Video.php:
- create($data): Crear nuevo video
- readByPlaylist($playlist_id, $exclude_id): Videos por playlist
- readOne($id): Obtener video por ID
- update($id, $data): Actualizar video
- delete($id): Eliminar video
- deleteByPlaylist($playlist_id): Eliminar todos los videos de una playlist

================================================================================
4. SISTEMA DE AUTENTICACIÓN
================================================================================

TECNOLOGÍA: Firebase Authentication
TIPOS DE LOGIN: Email/contraseña, Google, Facebook
ROLES: client (cliente), admin (administrador)

ARCHIVOS DE AUTENTICACIÓN:
- auth/firebase-config.js: Configuración de Firebase
- auth/auth.js: Lógica completa de autenticación
- login.php: Página de inicio de sesión
- signup.php: Página de registro
- auth_callback.php: Procesamiento post-autenticación
- logout.php: Cierre de sesión

FLUJO DE AUTENTICACIÓN:
1. Usuario accede a login.php o signup.php
2. Firebase maneja la autenticación
3. Se obtiene el ID Token
4. auth_callback.php procesa el token
5. Se verifica el rol del usuario
6. Redirección según rol:
   - Admin: views/admin/courses.php
   - Cliente: index.php

EMAILS DE ADMINISTRADOR:
- admin@ecommerce.com
- admin@elprofehernan.com

CONFIGURACIÓN FIREBASE:
- API Key: AIzaSyAtCjRAp58m3IewqHWgvwLuxxdIb5026kg
- Auth Domain: e-commerce-elprofehernan.firebaseapp.com
- Project ID: e-commerce-elprofehernan

================================================================================
5. CONTROLADORES Y FUNCIONALIDADES
================================================================================

ESTRUCTURA DE ENRUTAMIENTO:
index.php?controller=CONTROLADOR&action=ACCION&id=ID

CONTROLADORES PRINCIPALES:

1. AdminController.php:
   - dashboard(): Muestra el panel de administración

2. CartController.php:
   - add($playlist_id): Añadir curso al carrito
   - remove($playlist_id): Eliminar curso del carrito
   - view(): Mostrar carrito
   - checkout(): Proceso de compra
   - applyPromoCode($code): Aplicar código promocional
   
   CÓDIGOS PROMOCIONALES:
   - VERANO10: 10% descuento
   - EDUCACION25: 25% descuento
   - PROFE50: 50% descuento
   - NUEVOUSUARIO: 15% descuento
   - AHORRAHOY: 20% descuento

3. PlaylistController.php:
   - index(): Lista de playlists (admin)
   - create(): Crear nueva playlist
   - edit($id): Editar playlist
   - update(): Actualizar playlist
   - delete($id): Eliminar playlist
   - viewClientDetail($id): Vista detalle para cliente

4. VideoController.php:
   - upload(): Subir nuevo video
   - viewPlaylist($id): Ver videos de una playlist
   - viewVideo($id): Reproductor de video
   - editVideo($id): Editar video
   - updateVideo(): Actualizar video
   - deleteVideo($id): Eliminar video

================================================================================
6. VISTAS Y FRONTEND
================================================================================

TECNOLOGÍAS FRONTEND:
- HTML5
- CSS3 con variables CSS
- JavaScript vanilla
- Font Awesome 6.0.0
- Google Fonts (Poppins)

PALETA DE COLORES:
- Primario: #8a56e2 (púrpura)
- Naranja: #ff7846
- Rojo: #ff5a5a
- Azul: #56c6e2
- Verde: #56e2c6
- Púrpura secundario: #a256e2

VISTAS CLIENTE:
1. home.php: Página principal con catálogo de cursos
2. cart.php: Carrito de compras con códigos promocionales
3. checkout.php: Proceso de finalización de compra
4. course-detail.php: Detalle del curso con información completa

VISTAS ADMINISTRADOR:
1. dashboard.php: Panel con estadísticas y resumen
2. index.php: Gestión de playlists y subida de contenido
3. edit_playlist.php: Formulario de edición de playlist
4. edit_video.php: Formulario de edición de video
5. view_playlist.php: Vista de playlist con todos sus videos
6. view_video.php: Reproductor de video con controles personalizados

CARACTERÍSTICAS RESPONSIVE:
- Mobile-first design
- Breakpoints: 576px, 768px, 992px, 1200px
- Grid layouts adaptativos
- Menús colapsables

================================================================================
7. CONFIGURACIÓN Y ARCHIVOS DE APOYO
================================================================================

CONFIGURACIÓN DE BASE DE DATOS (config/Database.php):
```php
class Database {
    private $host = "127.0.0.1";
    private $db_name = "ecommerce_cursos";
    private $username = "root";
    private $password = "";
}
