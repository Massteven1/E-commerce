# El Profesor Hernán - E-commerce Platform

## Descripción del Proyecto

Plataforma de e-commerce especializada en cursos de inglés desarrollada en PHP con arquitectura MVC. El sistema permite la gestión completa de cursos, usuarios, pagos y contenido educativo.

## 🏗️ Arquitectura del Proyecto

### Estructura de Directorios

\`\`\`
E-commerce/
├── config/
│   └── Database.php                 # Configuración de base de datos
├── controllers/
│   ├── AdminController.php          # Controlador administrativo
│   ├── AuthController.php           # Autenticación y autorización
│   ├── CartController.php           # Gestión del carrito de compras
│   ├── PaymentController.php        # Procesamiento de pagos
│   ├── PlaylistController.php       # Gestión de cursos/playlists
│   └── VideoController.php          # Gestión de videos
├── models/
│   ├── Order.php                    # Modelo de pedidos
│   ├── Playlist.php                 # Modelo de cursos
│   ├── User.php                     # Modelo de usuarios
│   ├── UserCourse.php               # Relación usuario-curso
│   └── Video.php                    # Modelo de videos
├── views/
│   ├── admin/                       # Vistas administrativas
│   │   ├── courses.php
│   │   ├── dashboard.php
│   │   ├── edit_playlist.php
│   │   ├── orders.php
│   │   ├── settings.php
│   │   ├── sidebar.php
│   │   ├── upload_video.php
│   │   └── users.php
│   └── client/                      # Vistas del cliente
│       ├── all-courses.php
│       ├── cart.php
│       ├── checkout.php
│       ├── course-detail.php
│       ├── home.php
│       ├── order-confirmation.php
│       └── purchase-history.php
├── helpers/
│   ├── SecurityHelper.php           # Funciones de seguridad
│   ├── StripeHelper.php             # Integración con Stripe
│   └── ValidationHelper.php        # Validaciones
├── middleware/
│   └── AuthMiddleware.php           # Middleware de autenticación
├── includes/
│   ├── footer.php                   # Footer global
│   └── header.php                   # Header global
├── public/
│   └── css/
│       ├── cart-improvements.css
│       ├── checkout-improvements.css
│       └── styles.css
├── scripts/
│   └── create-sample-data.sql       # Script de datos de prueba
├── index.php                        # Página principal
├── login.php                        # Página de login
├── signup.php                       # Página de registro
├── logout.php                       # Logout
└── google-login.php                 # Login con Google
\`\`\`

## 🛠️ Tecnologías Utilizadas

### Backend
- **PHP 8.0+**: Lenguaje principal del servidor
- **MySQL 8.0+**: Base de datos relacional
- **PDO**: Capa de abstracción de base de datos
- **Sessions**: Manejo de sesiones de usuario

### Frontend
- **HTML5**: Estructura semántica
- **CSS3**: Estilos con variables CSS y Flexbox/Grid
- **JavaScript (Vanilla)**: Interactividad del cliente
- **Font Awesome 6.0**: Iconografía

### Integraciones
- **Stripe API**: Procesamiento de pagos
- **Google OAuth**: Autenticación social
- **cURL**: Comunicación HTTP

### Herramientas de Desarrollo
- **XAMPP**: Entorno de desarrollo local
- **phpMyAdmin**: Administración de base de datos
- **Git**: Control de versiones

## 🚀 Configuración del Entorno de Desarrollo

### Prerrequisitos
- XAMPP 8.0+ o similar (Apache + PHP + MySQL)
- Composer (opcional, para dependencias futuras)
- Git
- Navegador web moderno

### Instalación

1. **Clonar el repositorio**
   \`\`\`bash
   git clone [URL_DEL_REPOSITORIO]
   cd E-commerce
   \`\`\`

2. **Configurar XAMPP**
   - Iniciar Apache y MySQL
   - Colocar el proyecto en `htdocs/E-commerce/`

3. **Configurar la base de datos**
   \`\`\`sql
   CREATE DATABASE ecommerce_hernan;
   USE ecommerce_hernan;
   \`\`\`

4. **Ejecutar scripts de inicialización**
   \`\`\`bash
   # Ejecutar desde phpMyAdmin o línea de comandos
   mysql -u root -p ecommerce_hernan < scripts/create-sample-data.sql
   \`\`\`

5. **Configurar variables de entorno**
   \`\`\`php
   // En config/Database.php
   private $host = "localhost";
   private $db_name = "ecommerce_hernan";
   private $username = "root";
   private $password = "";
   \`\`\`

6. **Configurar Stripe (opcional)**
   \`\`\`php
   // En helpers/StripeHelper.php
   private $publishable_key = "pk_test_...";
   private $secret_key = "sk_test_...";
   \`\`\`

### Acceso a la Aplicación
- **URL Principal**: `http://localhost/E-commerce/`
- **Panel Admin**: `http://localhost/E-commerce/views/admin/dashboard.php`
- **Login**: `http://localhost/E-commerce/login.php`

## 📊 Estructura de Base de Datos

### Tablas Principales

#### users
\`\`\`sql
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('user', 'admin') DEFAULT 'user',
    google_id VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP NULL
);
\`\`\`

#### playlists (cursos)
\`\`\`sql
CREATE TABLE playlists (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) DEFAULT 0.00,
    level VARCHAR(10),
    cover_image VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
\`\`\`

#### orders
\`\`\`sql
CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
    stripe_payment_intent_id VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
\`\`\`

#### user_courses
\`\`\`sql
CREATE TABLE user_courses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    playlist_id INT NOT NULL,
    access_granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (playlist_id) REFERENCES playlists(id),
    UNIQUE KEY unique_user_course (user_id, playlist_id)
);
\`\`\`

## 🔧 Funcionalidades Principales

### Sistema de Autenticación
- **Registro/Login tradicional**: Email y contraseña
- **Login con Google**: OAuth 2.0
- **Gestión de sesiones**: Segura con tokens
- **Roles de usuario**: Admin y Usuario regular

### Gestión de Cursos
- **CRUD completo**: Crear, leer, actualizar, eliminar
- **Subida de videos**: Gestión de contenido multimedia
- **Categorización**: Por niveles (A1, A2, B1, B2, C1, C2)
- **Imágenes de portada**: Upload y gestión

### Sistema de Carrito
- **Agregar/Eliminar**: Gestión dinámica de items
- **Persistencia**: Mantiene estado entre sesiones
- **Códigos promocionales**: Sistema de descuentos
- **Cálculo de totales**: Subtotal, impuestos, descuentos

### Procesamiento de Pagos
- **Integración Stripe**: Pagos seguros con tarjeta
- **Webhooks**: Confirmación automática de pagos
- **Gestión de pedidos**: Seguimiento completo
- **Acceso automático**: Asignación de cursos post-pago

### Panel Administrativo
- **Dashboard**: Estadísticas y métricas
- **Gestión de usuarios**: CRUD y permisos
- **Gestión de cursos**: Contenido y precios
- **Gestión de pedidos**: Estados y seguimiento

## 🔒 Seguridad Implementada

### Autenticación y Autorización
- **Hash de contraseñas**: password_hash() con BCRYPT
- **Tokens CSRF**: Protección contra ataques CSRF
- **Validación de sesiones**: Verificación en cada request
- **Middleware de autenticación**: Control de acceso

### Validación de Datos
- **Sanitización**: htmlspecialchars() en todas las salidas
- **Validación de entrada**: Filtros y validaciones
- **Prepared statements**: Prevención de SQL injection
- **Validación de archivos**: Tipos y tamaños permitidos

### Comunicación Segura
- **HTTPS recomendado**: Para producción
- **Headers de seguridad**: CSP, HSTS, etc.
- **Validación de origen**: CORS y referrer

## 🧪 Testing y Debugging

### Pruebas Manuales
1. **Registro de usuario**
   - Crear cuenta nueva
   - Validar email único
   - Verificar hash de contraseña

2. **Funcionalidad del carrito**
   - Agregar cursos
   - Verificar persistencia
   - Calcular totales

3. **Proceso de pago**
   - Checkout completo
   - Confirmación de pago
   - Asignación de acceso

4. **Panel administrativo**
   - Crear/editar cursos
   - Gestionar usuarios
   - Ver estadísticas

### Debugging
- **Error logging**: error_log() en puntos críticos
- **Console logging**: JavaScript para frontend
- **Database queries**: Log de consultas SQL
- **Session debugging**: Verificar variables de sesión

## 🚀 Despliegue en Producción

### Configuración del Servidor
1. **Servidor web**: Apache/Nginx con PHP 8.0+
2. **Base de datos**: MySQL 8.0+ o MariaDB
3. **SSL/TLS**: Certificado válido para HTTPS
4. **PHP extensions**: PDO, cURL, GD, OpenSSL

### Variables de Entorno
\`\`\`php
// Configuración de producción
define('DB_HOST', 'your-db-host');
define('DB_NAME', 'your-db-name');
define('DB_USER', 'your-db-user');
define('DB_PASS', 'your-db-password');
define('STRIPE_SECRET_KEY', 'sk_live_...');
define('STRIPE_PUBLISHABLE_KEY', 'pk_live_...');
\`\`\`

### Optimizaciones
- **Compresión GZIP**: Reducir tamaño de respuestas
- **Cache de archivos**: Headers de cache apropiados
- **Minificación**: CSS y JavaScript
- **CDN**: Para archivos estáticos

## 📈 Métricas y Monitoreo

### KPIs del Sistema
- **Usuarios registrados**: Total y por período
- **Cursos vendidos**: Ingresos y conversión
- **Tasa de abandono**: Carrito y checkout
- **Tiempo de respuesta**: Performance del servidor

### Logs Importantes
- **Errores de aplicación**: PHP error log
- **Transacciones**: Log de pagos y pedidos
- **Acceso de usuarios**: Login/logout events
- **Actividad admin**: Cambios en el sistema

## 🔄 Mantenimiento y Actualizaciones

### Tareas Regulares
- **Backup de base de datos**: Diario automático
- **Limpieza de logs**: Rotación semanal
- **Actualización de dependencias**: Mensual
- **Revisión de seguridad**: Trimestral

### Monitoreo de Salud
- **Uptime**: Disponibilidad del servicio
- **Performance**: Tiempo de respuesta
- **Errores**: Rate de errores 4xx/5xx
- **Capacidad**: Uso de recursos del servidor

## 🤝 Contribución y Desarrollo

### Estándares de Código
- **PSR-12**: Estándar de codificación PHP
- **Comentarios**: Documentación en código
- **Naming conventions**: CamelCase para clases, snake_case para variables
- **Error handling**: Try-catch apropiado

### Flujo de Desarrollo
1. **Feature branch**: Crear rama para nueva funcionalidad
2. **Testing**: Pruebas locales completas
3. **Code review**: Revisión de código
4. **Merge**: Integración a rama principal
5. **Deploy**: Despliegue a producción

## 📞 Soporte y Contacto

### Documentación Técnica
- **API Reference**: Documentación de endpoints
- **Database Schema**: Diagrama ER actualizado
- **Deployment Guide**: Guía de despliegue detallada

### Resolución de Problemas Comunes
- **Carrito vacío**: Verificar sesiones PHP
- **Pagos fallidos**: Revisar configuración Stripe
- **Login issues**: Validar hash de contraseñas
- **Performance**: Optimizar consultas SQL

---

*Documentación actualizada: Enero 2024*
*Versión del proyecto: 1.0.0*
